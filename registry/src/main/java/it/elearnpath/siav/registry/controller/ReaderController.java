package it.elearnpath.siav.registry.controller;

import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import it.elearnpath.siav.registry.dto.ReaderDTO;
import it.elearnpath.siav.registry.exception.BadRequestException;
import it.elearnpath.siav.registry.service.LibraryCardService;
import it.elearnpath.siav.registry.service.ReaderService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@RestController
@RequestMapping("/readers")
public class ReaderController {

    private final ReaderService readerService;
    private final LibraryCardService libraryCardService;

    public ReaderController(ReaderService readerService, LibraryCardService libraryCardService) {
        this.readerService = readerService;
        this.libraryCardService = libraryCardService;
    }

    @ApiOperation(
            value = "Search all the readers present in the repository",
            notes = "Returns an array. No content if DB is empty",
            response = ReaderDTO.class,
            responseContainer = "List",
            produces = "application/json"
    )
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Readers request was successfull"),
            @ApiResponse(code = 204, message = "No readers present in the DB"),
            @ApiResponse(code = 400, message = "Error retrieving data")
    })
    @GetMapping("/all")
    public ResponseEntity<List<ReaderDTO>> getAllReaders() {

        List<ReaderDTO> readers = readerService.getAllReaders();

        if(readers.isEmpty()){
            return new ResponseEntity<List<ReaderDTO>>(HttpStatus.NO_CONTENT);
        }
        return new ResponseEntity<List<ReaderDTO>>(readers, HttpStatus.OK);

    }

    @ApiOperation(
            value = "Search all the readers by matching id and/or cardNumber. Returns a void array if no loans are present",
            notes = "Research is done by query string (optional parameters, at least 1 is required)." +
                    "Request example: /readers/search?id=1&cardNumber=1",
            response = ReaderDTO.class,
            responseContainer = "List",
            produces = "application/json")
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "The search was successful. (return a the list of Reader)"),
            @ApiResponse(code = 400, message = "The proper error is sent in the response's body")
    })
    @GetMapping("/search")
    public ResponseEntity<List<ReaderDTO>> searchReaderByIdOrByCardNumber(@RequestParam(required = false) Integer id,
                                                                          @RequestParam(required = false) Integer cardNumber)
            throws BadRequestException {

        if (id == null && cardNumber == null) {
            throw new BadRequestException("At least one parameter is required");
        }

        List<ReaderDTO> readers = readerService.searchByIdOrCardNumber(id, cardNumber);

        return new ResponseEntity<List<ReaderDTO>>(readers, HttpStatus.OK);

    }

    @ApiOperation(
            value = "Insert a Reader record in the DB if not present. The id is autogenerated.",
            notes = "Improper data will send a corresponding error in the body",
            response = ReaderDTO.class
    )
    @ApiResponses({
            @ApiResponse(code = 201, message = "Record created in the database"),
            @ApiResponse(code = 400, message = "Invalid data bind")
    })
    @PostMapping("/add")
    public ResponseEntity<ReaderDTO> insertReader(@RequestBody @Valid ReaderDTO readerDTO) throws BadRequestException {

        ReaderDTO readerDTOInserted = readerService.insertNewReader(readerDTO);

        return new ResponseEntity<ReaderDTO>(readerDTOInserted, HttpStatus.CREATED);
    }

    @ApiOperation(
            value = "Update the record if present in the DB. Id cannot be null",
            notes = "The object passed will overwrite all the records in the DB. Omitted parameters will set to null",
            response = ReaderDTO.class
    )
    @ApiResponses({
            @ApiResponse(code = 200, message = "Record updated successfully"),
            @ApiResponse(code = 400, message = "Invalid data bind")
    })
    @PutMapping("/update")
    public ResponseEntity<ReaderDTO> updateReader(@RequestBody @Valid ReaderDTO readerDTO) throws Exception {

        ReaderDTO readerUpdated = readerService.updateEntity(readerDTO);

        return new ResponseEntity<ReaderDTO>(readerUpdated, HttpStatus.OK);

    }

    @ApiOperation(
            value = "Delete a Reader record by id.",
            notes = "Are you sure you want to delete a Reader? Think about it",
            response = ReaderDTO.class
    )
    @ApiResponses({
            @ApiResponse(code = 200, message = "Record delete was successful"),
            @ApiResponse(code = 400, message = "Record not present in the database or generic error")
    })
    @DeleteMapping("/delete/{id}")
    public ResponseEntity deleteReader(@PathVariable Integer id) throws Exception {

        ReaderDTO readerDeleted = readerService.deleteReaderById(id);

        return new ResponseEntity(HttpStatus.OK);

    }

}
